---
# Create RHEL1, RHEL2, RHEL3.  DEPLOY WEB APPLICATION
- name: Create RHEL EC2 instances and deploy a web application
  hosts: localhost
  gather_facts: false
  vars:
    ec2_instance_type: t2.medium
    ec2_key_name: wave2024-demo
    ec2_vpc_subnet_id: sc5demo-public-sn
    ec2_security_group: sc5demo-sg
    ec2_image_id: ami-036d52dc86a04b099  # Replace with a valid RHEL AMI ID for the region chosen
    ec2_region: us-west-1
    ec2_names:
      - name: rhel1
      - name: rhel2
      - name: rhel3

  tasks:
    - name: Launch EC2 instances
      amazon.aws.ec2_instance:
        key_name: "{{ ec2_key_name }}"
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ ec2_image_id }}"
        region: "{{ ec2_region }}"
        # vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
        # security_group: "{{ ec2_security_group }}"
        vpc_subnet_id: subnet-03124d7a00217b889
        security_group: sg-06c44679ed6d604b7
        network:
          assign_public_ip: true
          subnet_id: "{{ ec2_vpc_subnet_id }}"
        wait: true
        count: 1
        tags:
          Name: "{{ item.name }}"
      with_items: "{{ ec2_names }}"
      register: ec2_instances

    - name: Add the new instances to the host group named launched
      ansible.builtin.add_host:
        hostname: "{{ item.public_dns_name }}"
        groupname: launched
      with_items: "{{ ec2_instances.results | map(attribute='instances') | flatten }}"

    - name: Wait for the SSH service to come up
      ansible.builtin.wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 60
        timeout: 320
        state: started
      with_items: "{{ ec2_instances.results | map(attribute='instances') | flatten }}"

    - name: Tag RHEL1 instance
      amazon.aws.ec2_tag:
        resource: "{{ item }}"
        tags:
          WebServer: "yes"
      with_items: "{{ ec2_instances.results | map(attribute='instances') | flatten }}"
      when: item.tags.Name == "rhel1"

- name: Configure and deploy web application on RHEL1
  hosts: launched
  become: true
  tasks:
    - name: Install Apache on RHEL1
      ansible.builtin.dnf:
        name: httpd
        state: present
      when: "'WebServer' in instance_tags"

    - name: Start and enable Apache on RHEL1
      ansible.builtin.service:
        name: httpd
        state: started
        enabled: true
      when: "'WebServer' in instance_tags"

    - name: Create a simple web page on RHEL1
      ansible.builtin.copy:
        dest: /var/www/html/index.html
        mode: "0644"
        content: |
          <html>
          <body>
          <h1 style="color:red;">Ansible Automation Platform Deployed Web Server</h1>
          <h1 style="color:blue;">Blue wave demo!</h1>
          </body>
          </html>
      when: "'WebServer' in instance_tags"

- name: Output the web application URL
  hosts: localhost
  tasks:
    - name: Show the URL for RHEL1
      ansible.builtin.debug:
        msg: "Web Application is available at http://{{ item.public_dns_name }}"
      with_items: "{{ ec2_instances.results | map(attribute='instances') | flatten }}"
      when: item.tags.Name == "rhel1"
