---
# Create RHEL1, RHEL2, RHEL3.  DEPLOY WEB APPLICATION
- name: PLAY1...Create RHEL EC2 instances and deploy a web application
  hosts: localhost
  gather_facts: false
  vars:
    ec2_instance_type: t2.medium
    ec2_key_name: wave2024-demo
    demo_name: sc5demo
    ec2_vpc_subnet_id: sc5demo-public-sn
    ec2_security_group: sc5demo-sg
    ec2_image_id: ami-036d52dc86a04b099  # Replace with a valid RHEL AMI ID for the region chosen
    ec2_region: us-west-1
    ec2_names:
      - name: rhel1
      - name: rhel2
      - name: rhel3

  tasks:
    - name: AWS | CREATE VM | get subnet info
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ ec2_region }}"
        filters:
          "tag:Name": "{{ demo_name }}-public-sn"
      register: ec2_vpc_subnet

    - name: AWS | CREATE VM | save subnet id
      ansible.builtin.set_fact:
        ec2_vpc_subnet_id: "{{ ec2_vpc_subnet.subnets | map(attribute='id') | list | last }}"

    - name: Launch EC2 instances
      amazon.aws.ec2_instance:
        key_name: "{{ ec2_key_name }}"
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ ec2_image_id }}"
        region: "{{ ec2_region }}"
        vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
        security_group: "{{ ec2_security_group }}"
        state: running
        network:
          assign_public_ip: true
          subnet_id: "{{ ec2_vpc_subnet_id }}"
        wait: true
        count: "{{ ec2_names | length }}"
        filters:
          instance-state-name: running
          "tag:bluewave": "True"
        tags:
          bluewave: "True"
      register: ec2_instances

    - name: Tag ec2 RHEL instance (rhel1, rhel2, rhel3)
      amazon.aws.ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{ item.instance_id }}"
        tags:
          Name: "rhel{{ my_idx + 1 }}"
      loop: "{{ ec2_instances.instances }}"
      loop_control:
        index_var: my_idx

    - name: Grab the instance info for RHEL1
      amazon.aws.ec2_instance_info:
        region: "{{ ec2_region }}"
        filters:
          instance-state-name: running
          "tag:Name": "rhel1"
      register: app_webserver

    - name: See the app webserver Output
      ansible.builtin.debug:
        msg: "{{ app_webserver }}"

    - name: Tag the ec2 web server (rhel1) instance
      amazon.aws.ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{ app_webserver.instances[0].instance_id }}"
        tags:
          WebServer: "True"

    - name: Add the web server (rhel1) to the host group named appwebserver
      ansible.builtin.add_host:
        hostname: "{{ item.public_dns_name }}"
        groupname: appwebserver
      with_items: "{{ app_webserver.instances }}"

    - name: Wait for the SSH service to come up on all new ec2 instances
      ansible.builtin.wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        timeout: 320
        state: started
      with_items: "{{ ec2_instances.instances | map(attribute='public_ip_address') | flatten }}"

- name: PLAY2...Configure and deploy web application on RHEL1
  hosts: appwebserver
  gather_facts: false
  vars:
    ec2_region: us-west-1
  tasks:
    - name: Grab the instance info for RHEL1
      amazon.aws.ec2_instance_info:
        region: "{{ ec2_region }}"
        filters:
          instance-state-name: running
          "tag:Name": "rhel1"
      register: rhel1app_webserver
      delegate_to: localhost

    - name: Install Apache on RHEL1
      become: true
      ansible.builtin.dnf:
        name: httpd
        state: present
#      when: "'WebServer' in instance_tags"

    - name: Start and enable Apache on RHEL1
      become: true
      ansible.builtin.service:
        name: httpd
        state: started
        enabled: true
#      when: "'WebServer' in instance_tags"

    - name: Create a simple web page on RHEL1
      become: true
      ansible.builtin.copy:
        dest: /var/www/html/index.html
        mode: "0644"
        content: |
          <html>
          <body>
          <h1 style="color:red;">Ansible Automation Platform Deployed Web Server</h1>
          <h1 style="color:blue;">Blue wave demo!</h1>
          </body>
          </html>
#      when: "'WebServer' in instance_tags"

    - name: Show the URL for RHEL1
      ansible.builtin.debug:
        msg: "Web Application is available at http://{{ item.public_dns_name }}"
#      with_items: "{{ ec2_instances.results | map(attribute='instances') | flatten }}"
      with_items: "{{ rhel1app_webserver.instances }}"
#      when: item.tags.Name == "rhel1"
